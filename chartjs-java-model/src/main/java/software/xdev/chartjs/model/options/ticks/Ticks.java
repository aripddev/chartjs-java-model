/*
 * Copyright Â© 2023 XDEV Software (https://xdev.software)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package software.xdev.chartjs.model.options.ticks;

import software.xdev.chartjs.model.color.Color;
import software.xdev.chartjs.model.enums.FontStyle;
import software.xdev.chartjs.model.javascript.JavaScriptFunction;


/**
 * The grid line configuration is nested under the scale configuration in the ticks key. It defines options for the tick
 * marks that are generated by the axis.
 */
public class Ticks<T extends Ticks<T>>
{
	protected Boolean autoSkip;
	protected Number autoSkipPadding;
	protected JavaScriptFunction callback;
	protected Boolean display;
	protected Color fontColor;
	protected String fontFamily;
	protected Number fontSize;
	protected FontStyle fontStyle;
	protected Number labelOffset;
	protected Number maxRotation;
	protected Number minRotation;
	protected Boolean mirror;
	protected Number padding;
	
	/**
	 * @see #setAutoSkip(Boolean)
	 */
	public Boolean getAutoSkip()
	{
		return this.autoSkip;
	}
	
	/**
	 * <p>
	 * If true, automatically calculates how many labels that can be shown and hides labels accordingly. Turn it off to
	 * show all labels no matter what
	 * </p>
	 *
	 * <p>
	 * Default {@code true}
	 * </p>
	 */
	@SuppressWarnings("unchecked")
	public T setAutoSkip(final Boolean autoSkip)
	{
		this.autoSkip = autoSkip;
		return (T)this;
	}
	
	/**
	 * @see #setAutoSkipPadding(Number)
	 */
	public Number getAutoSkipPadding()
	{
		return this.autoSkipPadding;
	}
	
	/**
	 * <p>
	 * Padding between the ticks on the horizontal axis when {@code autoSkip} is enabled.
	 * </p>
	 *
	 * <p>
	 * Note: Only applicable to horizontal scales.
	 * </p>
	 */
	@SuppressWarnings("unchecked")
	public T setAutoSkipPadding(final Number autoSkipPadding)
	{
		this.autoSkipPadding = autoSkipPadding;
		return (T)this;
	}
	
	/**
	 * @see #setCallback(JavaScriptFunction)
	 */
	public JavaScriptFunction getCallback()
	{
		return this.callback;
	}
	
	/**
	 * <p>
	 * Returns the string representation of the tick value as it should be displayed on the chart. See callback section
	 * below.
	 * </p>
	 *
	 * <p>
	 * Default {@code function(value) { return helpers.isArray(value) ? value : '' + value; }}
	 * </p>
	 */
	@SuppressWarnings("unchecked")
	public T setCallback(final JavaScriptFunction callback)
	{
		this.callback = callback;
		return (T)this;
	}
	
	/**
	 * @see #setDisplay(Boolean)
	 */
	public Boolean getDisplay()
	{
		return this.display;
	}
	
	/**
	 * <p>
	 * If true, show the ticks.
	 * </p>
	 *
	 * <p>
	 * Default {@code true}
	 * </p>
	 */
	@SuppressWarnings("unchecked")
	public T setDisplay(final Boolean display)
	{
		this.display = display;
		return (T)this;
	}
	
	/**
	 * @see #setFontColor(Color)
	 */
	public Color getFontColor()
	{
		return this.fontColor;
	}
	
	/**
	 * <p>
	 * Font color for the tick labels.
	 * </p>
	 *
	 * <p>
	 * Default {@code "#666"}
	 * </p>
	 */
	@SuppressWarnings("unchecked")
	public T setFontColor(final Color fontColor)
	{
		this.fontColor = fontColor;
		return (T)this;
	}
	
	/**
	 * @see #setFontFamily(String)
	 */
	public String getFontFamily()
	{
		return this.fontFamily;
	}
	
	/**
	 * <p>
	 * Font family for the tick labels, follows CSS font-family options.
	 * </p>
	 *
	 * <p>
	 * Default {@code "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif"}
	 * </p>
	 */
	@SuppressWarnings("unchecked")
	public T setFontFamily(final String fontFamily)
	{
		this.fontFamily = fontFamily;
		return (T)this;
	}
	
	/**
	 * @see #setFontSize(Number)
	 */
	public Number getFontSize()
	{
		return this.fontSize;
	}
	
	/**
	 * <p>
	 * Font size for the tick labels.
	 * </p>
	 *
	 * <p>
	 * Default {@code 12}
	 * </p>
	 */
	@SuppressWarnings("unchecked")
	public T setFontSize(final Number fontSize)
	{
		this.fontSize = fontSize;
		return (T)this;
	}
	
	/**
	 * @see #setFontStyle(FontStyle)
	 */
	public FontStyle getFontStyle()
	{
		return this.fontStyle;
	}
	
	/**
	 * <p>
	 * Font style for the tick labels, follows CSS font-style options (i.e. normal, italic, oblique, initial, inherit).
	 * </p>
	 *
	 * <p>
	 * Default {@code "normal"}
	 * </p>
	 */
	@SuppressWarnings("unchecked")
	public T setFontStyle(final FontStyle fontStyle)
	{
		this.fontStyle = fontStyle;
		return (T)this;
	}
	
	/**
	 * @see #setLabelOffset(Number)
	 */
	public Number getLabelOffset()
	{
		return this.labelOffset;
	}
	
	/**
	 * <p>
	 * Distance in pixels to offset the label from the centre point of the tick (in the y direction for the x axis, and
	 * the x direction for the y axis). Note: this can cause labels at the edges to be cropped by the edge of the
	 * canvas
	 * </p>
	 *
	 * <p>
	 * Default {@code 0}
	 * </p>
	 */
	@SuppressWarnings("unchecked")
	public T setLabelOffset(final Number labelOffset)
	{
		this.labelOffset = labelOffset;
		return (T)this;
	}
	
	/**
	 * @see #setMaxRotation(Number)
	 */
	public Number getMaxRotation()
	{
		return this.maxRotation;
	}
	
	/**
	 * <p>
	 * Maximum rotation for tick labels when rotating to condense labels. Note: Rotation doesn't occur until necessary.
	 * Note: Only applicable to horizontal scales.
	 * </p>
	 *
	 * <p>
	 * Default {@code 90}
	 * </p>
	 */
	@SuppressWarnings("unchecked")
	public T setMaxRotation(final Number maxRotation)
	{
		this.maxRotation = maxRotation;
		return (T)this;
	}
	
	/**
	 * @see #setMinRotation(Number)
	 */
	public Number getMinRotation()
	{
		return this.minRotation;
	}
	
	/**
	 * <p>
	 * Minimum rotation for tick labels. Note: Only applicable to horizontal scales.
	 * </p>
	 *
	 * <p>
	 * Default {@code 0}
	 * </p>
	 */
	@SuppressWarnings("unchecked")
	public T setMinRotation(final Number minRotation)
	{
		this.minRotation = minRotation;
		return (T)this;
	}
	
	/**
	 * @see #setMirror(Boolean)
	 */
	public Boolean getMirror()
	{
		return this.mirror;
	}
	
	/**
	 * <p>
	 * Flips tick labels around axis, displaying the labels inside the chart instead of outside. Note: Only applicable
	 * to vertical scales.
	 * </p>
	 *
	 * <p>
	 * Default {@code false}
	 * </p>
	 */
	@SuppressWarnings("unchecked")
	public T setMirror(final Boolean mirror)
	{
		this.mirror = mirror;
		return (T)this;
	}
	
	/**
	 * @see #setPadding(Number)
	 */
	public Number getPadding()
	{
		return this.padding;
	}
	
	/**
	 * <p>
	 * Padding between the tick label and the axis. Note: Only applicable to horizontal scales.
	 * </p>
	 *
	 * <p>
	 * Default {@code 10}
	 * </p>
	 */
	@SuppressWarnings("unchecked")
	public T setPadding(final Number padding)
	{
		this.padding = padding;
		return (T)this;
	}
}
